function [y1] = myNeuralNetworkFunctionForY1_881(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 07-Dec-2014 02:52:48.
% 
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 3xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [0;-1;0.610235033462089];
  x1_step1_gain = [2;1;7.77364515901972];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-3.9861060626675844;-0.68430566816381833;-0.14621443787268434;-3.0740486149293993];
  IW1_1 = [0.67590094980218307 0 -1.3478831427030398;1.9925093529919888 0 -1.5935094748483336;-0.13418150645691707 0 -0.52176263309015847;-1.7202295674584651 0 1.7041792290066025];
  
  % Layer 2
  b2 = 0.2785738312289614;
  LW2_1 = [0.29509966076850136 0.23273033668405252 1.8426158250077778 -0.32270678426776067];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 34.6947468365356;
  y1_step1_xoffset = 0.877985257230548;
  
  % ===== SIMULATION ========
  
  % Dimensions
  Q = size(x1,2); % samples
  
  % Input 1
  xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  
  % Layer 1
  a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
  
  % Layer 2
  a2 = repmat(b2,1,Q) + LW2_1*a1;
  
  % Output 1
  y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
